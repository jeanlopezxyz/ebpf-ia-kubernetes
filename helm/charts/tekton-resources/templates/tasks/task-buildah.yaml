apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: buildah
  namespace: ebpf-security
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  labels:
    app.kubernetes.io/name: tekton-ci
    app.kubernetes.io/instance: tekton-ci
    app.kubernetes.io/component: task-buildah
    app.kubernetes.io/part-of: ebpf-ai-system
    app.kubernetes.io/version: "0.7"
spec:
  description: >-
    Buildah task builds source into a container image and then pushes it to a registry.
  params:
    - name: IMAGE
      description: Reference of the image buildah will produce.
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1
    - name: STORAGE_DRIVER
      description: Set buildah storage driver
      default: overlay
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
    - name: CONTEXT
      description: Path to the directory to use as context.
      default: .
    - name: TLSVERIFY
      description: Verify TLS on the registry endpoint (for non-TLS registries set false)
      default: "true"
    - name: FORMAT
      description: The format of the built container, oci or docker
      default: "oci"
    - name: BUILD_EXTRA_ARGS
      description: Extra parameters for build command when building images.
      default: ""
    - name: PUSH_EXTRA_ARGS
      description: Extra parameters for push command when pushing images.
      default: ""
    - name: SKIP_PUSH
      description: Skip pushing the built image
      default: "false"
  workspaces:
    - name: source
    - name: sslcertdir
      optional: true
    - name: dockerconfig
      optional: true
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: Image repository where the built image was pushed
  steps:
    - name: build-and-push
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        privileged: true
      script: |
        # Run as root to avoid userid issues
        export HOME=/root
        export USER=root
        mkdir -p /root/.config/containers
        [ "$(workspaces.sslcertdir.bound)" = "true" ] && CERT_DIR_FLAG="--cert-dir=$(workspaces.sslcertdir.path)"
        [ "$(workspaces.dockerconfig.bound)" = "true" ] && cp "$(workspaces.dockerconfig.path)/.dockerconfigjson" "/tmp/config.json" && DOCKER_CONFIG="/tmp" && export DOCKER_CONFIG
        buildah ${CERT_DIR_FLAG} "--storage-driver=$(params.STORAGE_DRIVER)" bud $(params.BUILD_EXTRA_ARGS) \
          "--format=$(params.FORMAT)" "--tls-verify=$(params.TLSVERIFY)" \
          -f "$(params.DOCKERFILE)" -t "$(params.IMAGE)" "$(params.CONTEXT)"
        [ "$(params.SKIP_PUSH)" = "true" ] && echo "Push skipped" && exit 0
        # Push to external registry (quay.io)
        buildah ${CERT_DIR_FLAG} "--storage-driver=$(params.STORAGE_DRIVER)" push $(params.PUSH_EXTRA_ARGS) \
          "--tls-verify=$(params.TLSVERIFY)" --digestfile /tmp/image-digest \
          --retry=3 --retry-delay=5s \
          "$(params.IMAGE)" "docker://$(params.IMAGE)"
        tee "$(results.IMAGE_DIGEST.path)" < /tmp/image-digest
        printf '%s' "$(params.IMAGE)" | tee "$(results.IMAGE_URL.path)"
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
