---
- name: Check if SSH key exists
  stat:
    path: ~/.ssh/kubeadm_kvm_key
  register: ssh_key_stat

- name: Create SSH key for KVM access if not exists
  shell: ssh-keygen -t ed25519 -f ~/.ssh/kubeadm_kvm_key -N "" -C "kubeadm-kvm-access"
  when: not ssh_key_stat.stat.exists

- name: Install required packages for KVM and Kubernetes (Fedora)
  dnf:
    name:
      - qemu-kvm
      - libvirt
      - libvirt-daemon
      - bridge-utils
      - virt-manager
      - virt-install
      - curl
      - ca-certificates
      - gnupg2
      - cloud-utils
      - genisoimage
    state: present
  become: yes
  when: ansible_os_family == "RedHat"
  
- name: Install required packages for KVM and Kubernetes (Ubuntu/Debian)
  apt:
    name:
      - qemu-kvm
      - libvirt-daemon-system
      - bridge-utils
      - virt-manager
      - curl
      - apt-transport-https
      - ca-certificates
      - gnupg
      - lsb-release
      - cloud-image-utils
      - genisoimage
    state: present
  become: yes
  when: ansible_os_family == "Debian"

- name: Start and enable libvirt service
  systemd:
    name: libvirtd
    state: started
    enabled: yes
  become: yes

- name: Add current user to libvirt group
  user:
    name: "{{ ansible_user_id | default(lookup('env', 'USER')) }}"
    groups: libvirt
    append: yes
  become: yes
  ignore_errors: yes

- name: Ensure default network is active
  shell: |
    virsh net-list --all | grep -q default || virsh net-define /usr/share/libvirt/networks/default.xml
    virsh net-list --inactive | grep -q default && virsh net-start default
    virsh net-autostart default
  become: yes
  ignore_errors: yes

- name: Check if VM already exists
  shell: virsh list --all --name | grep -q "^{{ kubeadm.node_name }}$"
  register: vm_exists
  ignore_errors: yes
  become: yes

- name: Remove existing VM if present
  shell: |
    virsh destroy {{ kubeadm.node_name }} || true
    virsh undefine {{ kubeadm.node_name }} --remove-all-storage || true
  when: vm_exists.rc == 0
  become: yes

- name: Download Ubuntu Cloud Image
  get_url:
    url: "https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img"
    dest: "/tmp/ubuntu-24.04-cloud.img"
    mode: '0644'
  become: yes

- name: Create VM disk from cloud image
  shell: |
    qemu-img create -f qcow2 -F qcow2 -b /tmp/ubuntu-24.04-cloud.img /var/lib/libvirt/images/{{ kubeadm.node_name }}.qcow2 {{ kubeadm.vm.disk_size }}
    qemu-img resize /var/lib/libvirt/images/{{ kubeadm.node_name }}.qcow2 {{ kubeadm.vm.disk_size }}
  become: yes

- name: Read SSH public key
  shell: cat ~/.ssh/kubeadm_kvm_key.pub
  register: ssh_public_key_content
  changed_when: false

- name: Create cloud-init user-data
  copy:
    content: |
      #cloud-config
      hostname: {{ kubeadm.node_name }}
      manage_etc_hosts: true
      users:
        - name: ubuntu
          sudo: ALL=(ALL) NOPASSWD:ALL
          groups: users, admin
          shell: /bin/bash
          lock_passwd: false
          ssh_authorized_keys:
            - {{ ssh_public_key_content.stdout }}
      ssh_pwauth: false
      disable_root: false
      packages:
        - curl
        - ca-certificates
        - gnupg
        - lsb-release
        - apt-transport-https
        - openssh-server
      runcmd:
        - systemctl disable --now ufw
        - swapoff -a
        - sed -i '/ swap / s/^/#/' /etc/fstab
        - systemctl enable ssh
        - systemctl start ssh
        - systemctl disable --now systemd-networkd-wait-online || true
        - |
          cat > /etc/netplan/01-static.yaml << EOF
          network:
            version: 2
            ethernets:
              enp1s0:
                dhcp4: false
                dhcp6: false
                addresses:
                  - {{ kubeadm.vm.static_ip }}/24
                routes:
                  - to: default
                    via: {{ kubeadm.vm.gateway }}
                nameservers:
                  addresses:
                    - {{ kubeadm.vm.gateway }}
                    - 8.8.8.8
          EOF
        - netplan apply
    dest: /tmp/user-data
  become: yes

- name: Create cloud-init meta-data
  copy:
    content: |
      instance-id: {{ kubeadm.node_name }}
      local-hostname: {{ kubeadm.node_name }}
    dest: /tmp/meta-data
  become: yes

- name: Create cloud-init ISO
  shell: |
    genisoimage -output /tmp/cloud-init.iso -volid cidata -joliet -rock /tmp/user-data /tmp/meta-data
  become: yes

- name: Create KVM virtual machine with cloud image
  shell: |
    virt-install \
      --name {{ kubeadm.node_name }} \
      --memory {{ kubeadm.vm.memory }} \
      --vcpus {{ kubeadm.vm.cpus }} \
      --disk /var/lib/libvirt/images/{{ kubeadm.node_name }}.qcow2,device=disk \
      --disk /tmp/cloud-init.iso,device=cdrom \
      --os-variant ubuntu22.04 \
      --network bridge={{ kubeadm.vm.network_bridge }} \
      --graphics none \
      --console pty,target_type=serial \
      --noautoconsole \
      --import
  become: yes
  register: vm_create

- name: Wait for VM to boot
  pause:
    seconds: 30

- name: Set VM IP variable (using static IP)
  set_fact:
    kubeadm_vm_ip: "{{ kubeadm.vm.static_ip }}"

- name: Display VM IP
  debug:
    msg: "VM IP Address: {{ kubeadm_vm_ip }}"

- name: Wait for SSH to be available
  wait_for:
    host: "{{ kubeadm_vm_ip }}"
    port: 22
    delay: 10
    timeout: 300

- name: Install containerd and Kubernetes components
  shell: |
    ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i ~/.ssh/kubeadm_kvm_key ubuntu@{{ kubeadm_vm_ip }} 'sudo bash -s' << 'EOF'
    # Update system
    apt-get update
    apt-get upgrade -y
    
    # Install containerd
    apt-get install -y containerd
    mkdir -p /etc/containerd
    containerd config default | tee /etc/containerd/config.toml
    sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
    systemctl restart containerd
    systemctl enable containerd
    
    # Configure kernel modules
    cat <<EOT | tee /etc/modules-load.d/k8s.conf
    overlay
    br_netfilter
    EOT
    
    modprobe overlay
    modprobe br_netfilter
    
    # Configure sysctl
    cat <<EOT | tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
    EOT
    
    sysctl --system
    
    # Install Kubernetes
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
    
    apt-get update
    apt-get install -y kubelet kubeadm kubectl
    apt-mark hold kubelet kubeadm kubectl
    
    # Initialize cluster
    kubeadm init --pod-network-cidr={{ kubeadm.pod_network_cidr }} --service-cidr={{ kubeadm.service_cidr }} --apiserver-advertise-address={{ kubeadm.vm.static_ip }} --apiserver-cert-extra-sans=api.k8s.labjp.xyz,{{ kubeadm.hostname }}
    
    # Configure kubectl for ubuntu user
    mkdir -p /home/ubuntu/.kube
    cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
    chown ubuntu:ubuntu /home/ubuntu/.kube/config
    
    # Remove master taint for single-node cluster
    export KUBECONFIG=/etc/kubernetes/admin.conf
    kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true
    
    echo "✅ Kubeadm cluster initialized successfully"
    EOF
  register: kubeadm_init
  retries: 2
  delay: 10
  
- name: Copy kubeconfig to local machine
  shell: |
    mkdir -p ~/.kube
    scp -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i ~/.ssh/kubeadm_kvm_key ubuntu@{{ kubeadm_vm_ip }}:/home/ubuntu/.kube/config ~/.kube/config-kubeadm
    sed -i "s/127.0.0.1/{{ kubeadm.hostname }}/g" ~/.kube/config-kubeadm
    sed -i "s/localhost/{{ kubeadm.hostname }}/g" ~/.kube/config-kubeadm
    sed -i "s/{{ kubeadm_vm_ip }}/{{ kubeadm.hostname }}/g" ~/.kube/config-kubeadm
  
- name: Display kubeadm cluster information
  debug:
    msg:
      - "🚀 Kubeadm cluster '{{ kubeadm.node_name }}' is ready!"
      - "📊 Nodes: 1 (single-node setup)"
      - "💾 Memory: {{ kubeadm.vm.memory }}MB"
      - "⚡ CPUs: {{ kubeadm.vm.cpus }}"
      - "💽 Disk: {{ kubeadm.vm.disk_size }}"
      - "🔄 Kubernetes: {{ kubeadm.kubernetes_version }}"
      - "🌐 VM IP: {{ kubeadm_vm_ip }}"
      - "📦 Runtime: containerd"
      - "🔗 Access: export KUBECONFIG=~/.kube/config-kubeadm"
      - "   or: kubectl --kubeconfig ~/.kube/config-kubeadm get nodes"