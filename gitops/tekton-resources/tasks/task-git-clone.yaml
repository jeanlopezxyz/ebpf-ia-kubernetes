apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: git-clone
  namespace: ebpf-security
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  labels:
    app.kubernetes.io/name: tekton-ci
    app.kubernetes.io/instance: tekton-ci
    app.kubernetes.io/component: task-git-clone
    app.kubernetes.io/part-of: ebpf-ai-system
    app.kubernetes.io/version: "0.9"
spec:
  description: Clone a git repo into the output workspace.
  workspaces:
    - name: output
      description: The git repo will be cloned into this Workspace.
    - name: ssh-directory
      optional: true
    - name: basic-auth
      optional: true
    - name: ssl-ca-directory
      optional: true
  params:
    - name: url
      type: string
      description: Repository URL to clone from.
    - name: revision
      type: string
      description: Revision to checkout.
      default: ""
    - name: submodules
      type: string
      default: "true"
    - name: depth
      type: string
      default: "1"
    - name: sslVerify
      type: string
      default: "true"
  steps:
    - name: clone
      image: alpine/git
      env:
        - name: HOME
          value: /tmp
        - name: GIT_CONFIG_NOSYSTEM
          value: "true"
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        # Clone to temporary directory first, then copy to workspace
        TEMP_DIR="/tmp/git-clone-temp"
        OUTPUT_DIR="$(workspaces.output.path)"
        
        # Configure git via environment variables only
        export GIT_CONFIG_COUNT=3
        export GIT_CONFIG_KEY_0=user.name
        export GIT_CONFIG_VALUE_0="tekton-pipeline"
        export GIT_CONFIG_KEY_1=user.email
        export GIT_CONFIG_VALUE_1="tekton@pipeline.local"
        export GIT_CONFIG_KEY_2=safe.directory
        export GIT_CONFIG_VALUE_2="*"
        
        # Clean up temp and output directories
        rm -rf "$TEMP_DIR"
        rm -rf "$OUTPUT_DIR"/*
        
        # Clone to temp directory with proper permissions
        git clone --depth=$(params.depth) "$(params.url)" "$TEMP_DIR"
        cd "$TEMP_DIR"
        if [ -n "$(params.revision)" ] && [ "$(params.revision)" != "main" ]; then
          git checkout "$(params.revision)"
        fi
        
        # Copy all contents to workspace
        cp -r . "$OUTPUT_DIR/"
        
        echo "Successfully cloned repository to workspace"
        ls -la "$OUTPUT_DIR/"
